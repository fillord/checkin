import logging
import re
import config
import database
from datetime import datetime, timedelta, time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_all_active_employees_with_schedules, has_checked_in_today, get_report_stats_for_period, is_holiday
from config import LOCAL_TIMEZONE, ADMIN_IDS, LIVENESS_ACTIONS 

logger = logging.getLogger(__name__)

async def send_report_for_period(start_date, end_date, context: ContextTypes.DEFAULT_TYPE, title_prefix: str, chat_ids: list[int] | int):
    if not isinstance(chat_ids, list):
        chat_ids = [chat_ids]
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç: {title_prefix}...")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ {chat_id}: {e}")
    stats = await get_report_stats_for_period(start_date, end_date)
    def escape_markdown(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)
    start_str = escape_markdown(start_date.strftime('%d.%m.%Y'))
    end_str = escape_markdown(end_date.strftime('%d.%m.%Y'))
    period_str = start_str if start_date == end_date else f"—Å {start_str} –ø–æ {end_str}"
    report_lines = [
        f"üìä *{escape_markdown(title_prefix)} –∑–∞ {period_str}*",
        "",
        f"üë• *–í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π* \\(–ø–ª–∞–Ω\\): {stats['total_work_days']}",
        f"‚úÖ *–í—Å–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–æ–≤* \\(—Ñ–∞–∫—Ç\\): {stats['total_arrivals']}",
        f"üïí *–ò–∑ –Ω–∏—Ö –æ–ø–æ–∑–¥–∞–Ω–∏–π:* {stats['total_lates']}",
    ]
    if stats.get('late_employees'):
        for name, dates in stats['late_employees'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}* \\({escaped_dates}\\)")
    report_lines.append("") 
    report_lines.append(f"‚ùå *–ü—Ä–æ–ø—É—Å–∫–∏* \\({len(stats['absences'])} —á–µ–ª–æ–≤–µ–∫\\(–∞\\)\\):")
    if stats['absences']:
        for name, dates in stats['absences'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}*: {escaped_dates}")
    else:
        report_lines.append(r"    `‚îî` –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç\!")
    report_text = "\n".join(report_lines)
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=report_text, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ {chat_id}: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")

async def send_daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    await send_report_for_period(datetime.now(LOCAL_TIMEZONE).date(), datetime.now(LOCAL_TIMEZONE).date(), context, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", ADMIN_IDS)

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def _format_user_list(users_dict: dict, show_status=False) -> str:
    if not users_dict:
        return "_–ø—É—Å—Ç–æ_"
    lines = []
    for data in users_dict.values():
        name = data['name'] if isinstance(data, dict) else data
        line = escape_markdown_v2(name)
        if show_status and isinstance(data, dict) and data.get('status'):
            status_text = {
                'LATE': '–æ–ø–æ–∑–¥–∞–ª(–∞)', 'VACATION': '–æ—Ç–ø—É—Å–∫', 
                'SICK_LEAVE': '–±–æ–ª—å–Ω–∏—á–Ω—ã–π', 'APPROVED_LEAVE': '–æ—Ç–ø—Ä–æ—Å–∏–ª—Å—è(–∞—Å—å)'
            }.get(data['status'], '')
            if status_text:
                line += f" *\\({escape_markdown_v2(status_text)}\\)*"
        lines.append(line)
    return "\n".join(f" \\- {line}" for line in lines)

async def send_dashboard_snapshot(context: ContextTypes.DEFAULT_TYPE, report_type: str):
    today = datetime.now(LOCAL_TIMEZONE).date()
    title_text = "üìä –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞" if report_type == 'midday' else "üìä –í–µ—á–µ—Ä–Ω—è—è —Å–≤–æ–¥–∫–∞"
    logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞: {title_text} ---")
    stats = await database.get_dashboard_stats(today)
    title = escape_markdown_v2(title_text)
    date_str = escape_markdown_v2(today.strftime('%d.%m.%Y'))
    text_lines = [
        f"*{title} –Ω–∞ {date_str}*",
        f"*–í—Å–µ–≥–æ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É:* {stats['total_scheduled']}\n",
    ]
    if report_type == 'midday':
        text_lines.extend([
            f"‚úÖ *–ü—Ä–∏—à–ª–∏:* {len(stats['arrived'])}",
            _format_user_list(stats['arrived'], show_status=True), "\n",
            f"üå¥ *–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç \\(—É–≤–∞–∂–∏—Ç\\.\\):* {len(stats['on_leave'])}",
            _format_user_list(stats['on_leave'], show_status=True), "\n",
            f"‚ùì *–ï—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:* {len(stats['absent'])}",
            _format_user_list(stats['absent']),
        ])
    elif report_type == 'evening':
        on_site_or_incomplete = {**stats['incomplete'], **{k: v['name'] for k,v in stats.get('arrived', {}).items() if k not in stats.get('departed', {})}}
        absent_total = {**stats['absent'], **stats['incomplete']}
        text_lines.extend([
            f"üèÅ *–ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–µ–Ω—å \\(—É—à–ª–∏\\):* {len(stats['departed'])}",
             _format_user_list(stats['departed']), "\n",
            f"üå¥ *–ù–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º/–≤ –æ—Ç–ø—É—Å–∫–µ:* {len(stats['on_leave'])}",
            _format_user_list(stats['on_leave'], show_status=True), "\n",
            f"‚ùå *–ü—Ä–æ–≥—É–ª –∏–ª–∏ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥:* {len(absent_total)}",
            _format_user_list(absent_total), "\n"
        ])
    final_text = "\n".join(text_lines)
    for admin_id in config.ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=final_text, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def check_and_send_notifications(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(LOCAL_TIMEZONE)
    today = now.date()
    if await is_holiday(today):
        logger.info(f"–°–µ–≥–æ–¥–Ω—è ({today.isoformat()}) –ø—Ä–∞–∑–¥–Ω–∏–∫. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    today_str = today.isoformat()
    if 'notifications_sent' not in context.bot_data:
        context.bot_data['notifications_sent'] = {}
    if 'unhandled_late_users' not in context.bot_data:
        context.bot_data['unhandled_late_users'] = set()
    if context.bot_data.get('last_cleanup_date') != today_str:
        context.bot_data['notifications_sent'] = {}
        context.bot_data['unhandled_late_users'] = set()
        context.bot_data['last_cleanup_date'] = today_str
    employees = await database.get_all_active_employees_with_schedules(today)
    if not employees:
        return
    for emp_id, name, start_time_str in employees:
        try:
            if start_time_str is None:
                continue
            logger.info(f"---[–ü–†–û–í–ï–†–ö–ê]--- –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} (ID: {emp_id}), –≥—Ä–∞—Ñ–∏–∫: '{start_time_str}'")
            start_time = start_time_str if isinstance(start_time_str, time) else time.fromisoformat(start_time_str)
            shift_start_datetime = datetime.combine(now.date(), start_time, tzinfo=LOCAL_TIMEZONE)
            warning_datetime = shift_start_datetime - timedelta(minutes=5)
            warning_key = f"{emp_id}_warning_{today_str}"
            if now >= warning_datetime and not context.bot_data['notifications_sent'].get(warning_key):
                if not await database.has_checked_in_today(emp_id, "ARRIVAL"):
                    await context.bot.send_message(chat_id=emp_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è.")
                context.bot_data['notifications_sent'][warning_key] = True
            missed_datetime = shift_start_datetime + timedelta(minutes=5, seconds=30)
            missed_key = f"{emp_id}_missed_{today_str}"
            if now >= missed_datetime and not context.bot_data['notifications_sent'].get(missed_key):
                if not await database.has_checked_in_today(emp_id, "ARRIVAL"):
                    try:
                        await context.bot.send_message(chat_id=emp_id, text="–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫-–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–∏—Ö–æ–¥', —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.")
                        context.bot_data['unhandled_late_users'].add(emp_id)
                        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (ID: {emp_id}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏–π.")
                    except Exception as e:
                        logger.error(f"–û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ –¥–ª—è {name}: {e}")
                context.bot_data['notifications_sent'][missed_key] = True
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} (ID: {emp_id}): {e}", exc_info=True)

async def send_departure_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(LOCAL_TIMEZONE)
    today_str = now.date().isoformat()
    logger.info("---[–ó–ê–î–ê–ß–ê]--- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± —É—Ö–æ–¥–µ ---")
    employees = await database.get_all_active_employees_with_schedules(now.date())
    for emp_id, name, _ in employees:
        try:
            schedule = await database.get_employee_today_schedule(emp_id)
            if not schedule or not schedule.get('end_time'):
                continue
            shift_end_datetime = datetime.combine(now.date(), schedule['end_time'], tzinfo=LOCAL_TIMEZONE)
            reminder_datetime = shift_end_datetime + timedelta(minutes=15)
            if now < reminder_datetime:
                continue
            reminder_key = f"{emp_id}_departure_reminder_{today_str}"
            if context.bot_data.get('notifications_sent', {}).get(reminder_key):
                continue 
            has_arrived = await database.has_checked_in_today(emp_id, "ARRIVAL")
            has_departed = await database.has_checked_in_today(emp_id, "DEPARTURE")
            if has_arrived and not has_departed:
                await context.bot.send_message(
                    chat_id=emp_id,
                    text="üëã –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥! –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ 23:00, –∏–Ω–∞—á–µ –¥–µ–Ω—å –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–≥—É–ª."
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —É—Ö–æ–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {name} (ID: {emp_id})")
            context.bot_data.setdefault('notifications_sent', {})[reminder_key] = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± —É—Ö–æ–¥–µ –¥–ª—è {emp_id}: {e}", exc_info=True)

async def apply_incomplete_day_penalty(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(LOCAL_TIMEZONE)
    yesterday = now.date() - timedelta(days=1) 
    if await is_holiday(yesterday):
        logger.info(f"–í—á–µ—Ä–∞ ({yesterday.isoformat()}) –±—ã–ª –ø—Ä–∞–∑–¥–Ω–∏–∫. –®—Ç—Ä–∞—Ñ—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è.")
        return
    logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã–π —É—Ö–æ–¥ –∑–∞ {yesterday.isoformat()} ---")
    employees = await database.get_all_active_employees_with_schedules(yesterday)
    for emp_id, name, _ in employees:
        try:
            has_arrived = await database.has_checked_in_on_date(emp_id, "ARRIVAL", yesterday)
            if not has_arrived:
                continue
            has_departed = await database.has_checked_in_on_date(emp_id, "DEPARTURE", yesterday)
            if has_arrived and not has_departed:
                await database.override_as_absent(emp_id, yesterday)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è {emp_id}: {e}", exc_info=True)

async def check_for_absentees(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
    –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã, –∏ –æ—Ç–º–µ—á–∞–µ—Ç –∏—Ö –∫–∞–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤.
    """
    now = datetime.now(LOCAL_TIMEZONE)
    today = now.date()

    if await is_holiday(today):
        logger.info(f"–°–µ–≥–æ–¥–Ω—è ({today.isoformat()}) –ø—Ä–∞–∑–¥–Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return

    employees = await database.get_all_active_employees_with_schedules(today)
    if not employees:
        return

    logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—É–ª—ã ---")
    for emp_id, name, start_time_str in employees:
        try:
            if start_time_str is None:
                continue

            start_time = start_time_str if isinstance(start_time_str, time) else time.fromisoformat(start_time_str)
            shift_start_datetime = datetime.combine(today, start_time, tzinfo=LOCAL_TIMEZONE)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 3 —á–∞—Å–∞ —Å –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            if now > shift_start_datetime + timedelta(hours=3):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ
                if not await database.has_checked_in_today(emp_id, "ARRIVAL"):
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≥—É–ª
                    await database.mark_as_absent(emp_id, today)
                    logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (ID: {emp_id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫.")
                    try:
                        await context.bot.send_message(
                            chat_id=emp_id,
                            text="–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ '–ø—Ä–æ–≥—É–ª', —Ç–∞–∫ –∫–∞–∫ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è."
                        )
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—É–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {name}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—É–ª–æ–≤ –¥–ª—è {name} (ID: {emp_id}): {e}", exc_info=True)