# jobs.py
import logging
from datetime import datetime, timedelta, time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_all_active_employees_with_schedules, has_checked_in_today, get_report_stats_for_period
from config import LOCAL_TIMEZONE, ADMIN_IDS, LIVENESS_ACTIONS # LIVENESS_ACTIONS - –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
import re


logger = logging.getLogger(__name__)

async def send_report_for_period(start_date, end_date, context: ContextTypes.DEFAULT_TYPE, title_prefix: str, chat_ids: list[int] | int):
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ send_report_for_period –∏–∑ bot.py)
    if not isinstance(chat_ids, list):
        chat_ids = [chat_ids]
    
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç: {title_prefix}...")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ {chat_id}: {e}")

    stats = await get_report_stats_for_period(start_date, end_date)
    
    def escape_markdown(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

    start_str = escape_markdown(start_date.strftime('%d.%m.%Y'))
    end_str = escape_markdown(end_date.strftime('%d.%m.%Y'))
    period_str = start_str if start_date == end_date else f"—Å {start_str} –ø–æ {end_str}"
    
    report_lines = [
        f"üìä *{escape_markdown(title_prefix)} –∑–∞ {period_str}*",
        "",
        f"üë• *–í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π* \\(–ø–ª–∞–Ω\\): {stats['total_work_days']}",
        f"‚úÖ *–í—Å–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–æ–≤* \\(—Ñ–∞–∫—Ç\\): {stats['total_arrivals']}",
        f"üïí *–ò–∑ –Ω–∏—Ö –æ–ø–æ–∑–¥–∞–Ω–∏–π:* {stats['total_lates']}",
    ]
    
    if stats.get('late_employees'):
        for name, dates in stats['late_employees'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}* \\({escaped_dates}\\)")

    report_lines.append("") 
    report_lines.append(f"‚ùå *–ü—Ä–æ–ø—É—Å–∫–∏* \\({len(stats['absences'])} —á–µ–ª–æ–≤–µ–∫\\(–∞\\)\\):")
    
    if stats['absences']:
        for name, dates in stats['absences'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}*: {escaped_dates}")
    else:
        report_lines.append(r"    `‚îî` –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç\!")
    
    report_text = "\n".join(report_lines)
        
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=report_text, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ {chat_id}: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")

async def send_daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    await send_report_for_period(datetime.now(LOCAL_TIMEZONE).date(), datetime.now(LOCAL_TIMEZONE).date(), context, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", ADMIN_IDS)

async def check_and_send_notifications(context: ContextTypes.DEFAULT_TYPE):
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_and_send_notifications –∏–∑ bot.py)
    logger.info("---[–ó–ê–î–ê–ß–ê]--- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---")
    now = datetime.now(LOCAL_TIMEZONE)
    today_str = now.date().isoformat()

    if 'notifications_sent' not in context.bot_data:
        context.bot_data['notifications_sent'] = {}
    if context.bot_data.get('last_cleanup_date') != today_str:
        logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ù–æ–≤—ã–π –¥–µ–Ω—å ({today_str})! –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        context.bot_data['notifications_sent'] = {}
        context.bot_data['last_cleanup_date'] = today_str

    employees = await get_all_active_employees_with_schedules(now.weekday())
    if not employees:
        return
        
    logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    for emp_id, name, start_time_str in employees:
        try:
            logger.info(f"---[–ü–†–û–í–ï–†–ö–ê]--- –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} (ID: {emp_id}), –≥—Ä–∞—Ñ–∏–∫: '{start_time_str}'")
            start_time = time.fromisoformat(start_time_str)
            shift_start_datetime = datetime.combine(now.date(), start_time, tzinfo=LOCAL_TIMEZONE)

            warning_datetime = shift_start_datetime - timedelta(minutes=5)
            missed_datetime = shift_start_datetime + timedelta(minutes=5, seconds=30)
            
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (now)  : {now.isoformat()}")
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è : {warning_datetime.isoformat()}")
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –í—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è      : {missed_datetime.isoformat()}")
            
            warning_key = f"{emp_id}_warning_{today_str}"
            missed_key = f"{emp_id}_missed_{today_str}"
            
            is_time_for_warning = now >= warning_datetime
            is_warning_sent = context.bot_data['notifications_sent'].get(warning_key, False)
            logger.info(f"    [–£–°–õ–û–í–ò–ï WARNING] now >= warning_datetime? -> {is_time_for_warning}. sent? -> {is_warning_sent}")

            is_time_for_missed = now >= missed_datetime
            is_missed_sent = context.bot_data['notifications_sent'].get(missed_key, False)
            logger.info(f"    [–£–°–õ–û–í–ò–ï MISSED]  now >= missed_datetime?  -> {is_time_for_missed}. sent? -> {is_missed_sent}")
            
            if is_time_for_warning and not is_warning_sent:
                has_checked_in = await has_checked_in_today(emp_id, "ARRIVAL")
                logger.info(f"    -> –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∏–Ω–∞ –¥–ª—è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {'–ï–°–¢–¨' if has_checked_in else '–ù–ï–¢'}")
                if not has_checked_in:
                    await context.bot.send_message(chat_id=emp_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è.")
                    logger.info(f"    -> –û–¢–ü–†–ê–í–õ–ï–ù–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –¥–ª—è {name}.")
                context.bot_data['notifications_sent'][warning_key] = True

            if is_time_for_missed and not is_missed_sent:
                has_checked_in = await has_checked_in_today(emp_id, "ARRIVAL")
                logger.info(f"    -> –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∏–Ω–∞ –¥–ª—è –û–ü–û–ó–î–ê–ù–ò–Ø: {'–ï–°–¢–¨' if has_checked_in else '–ù–ï–¢'}")
                if not has_checked_in:
                    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º", callback_data="late_checkin")]]
                    await context.bot.send_message(chat_id=emp_id, text="–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫-–∏–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–ø–æ–∑–¥–∞–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(keyboard))
                    logger.info(f"    -> –û–¢–ü–†–ê–í–õ–ï–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –û–ü–û–ó–î–ê–ù–ò–ò –¥–ª—è {name}.")
                context.bot_data['notifications_sent'][missed_key] = True
        
        except Exception as e:
            logger.error(f"---[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê]--- –≤ —Ü–∏–∫–ª–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} (ID: {emp_id}): {e}", exc_info=True)