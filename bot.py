# -*- coding: utf-8 -*-

"""
Telegram Check-in Bot v12.9 (Final Full Code - Refactored)
===========================================================

–≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –≤–∫–ª—é—á–∞—è:
- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (/admin)
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, –Ω–µ–¥–µ–ª—é, –ø–µ—Ä–∏–æ–¥)
- –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∂–∏–≤–æ—Å—Ç—å" –ø—Ä–∏ —á–µ–∫–∏–Ω–µ
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏—è—Ö
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —á–µ–∫-–∏–Ω–∞–º–∏ –∏–∑-–∑–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
1.  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.
    pip install "python-telegram-bot>=21.0" aiosqlite geopy python-dotenv face_recognition numpy opencv-python apscheduler
2.  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª .env, —É–∫–∞–∑–∞–≤ –≤–∞—à TELEGRAM_BOT_TOKEN.
3.  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ADMIN_IDS –≤–∞—à–∏–º Telegram ID.
4.  –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏–π (bot_persistence.pickle).
5.  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.
"""

import logging
import asyncio
import aiosqlite
import os
import re
import random
import csv
from datetime import time, datetime, date, timedelta
from dotenv import load_dotenv
from io import StringIO, BytesIO
import numpy as np
from collections import defaultdict
import calendar

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
import face_recognition
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, MessageOriginUser, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    PicklePersistence,
    CallbackQueryHandler
)
from geopy.distance import geodesic

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env.")

ADMIN_IDS = [1027958463]  # !!! –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï ID –ê–î–ú–ò–ù–û–í !!!

from zoneinfo import ZoneInfo
LOCAL_TIMEZONE = ZoneInfo("Asia/Almaty")

WORK_LOCATION_COORDS = (43.26103183044612, 76.89106713108873)
ALLOWED_RADIUS_METERS = 200
FACE_DISTANCE_THRESHOLD = 0.6 

DB_NAME = "checkin_bot_final.db"
PERSISTENCE_FILE = "bot_persistence.pickle"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
CHOOSE_ACTION, AWAITING_PHOTO, AWAITING_LOCATION, REGISTER_FACE = range(4)
(
    ADMIN_MENU, ADMIN_REPORTS_MENU,
    ADD_GET_ID, ADD_GET_NAME,
    MODIFY_GET_ID,
    DELETE_GET_ID, DELETE_CONFIRM,
    SCHEDULE_MON, SCHEDULE_TUE, SCHEDULE_WED, SCHEDULE_THU, SCHEDULE_FRI, SCHEDULE_SAT, SCHEDULE_SUN,
    REPORT_GET_DATES
) = range(4, 19)

MONTHLY_CSV_GET_MONTH = 19 
# --- –ö–Ω–æ–ø–∫–∏ ---
BUTTON_ARRIVAL = "‚úÖ –ü—Ä–∏—Ö–æ–¥"
BUTTON_DEPARTURE = "üèÅ –£—Ö–æ–¥"
BUTTON_ADMIN_ADD = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BUTTON_ADMIN_MODIFY = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"
BUTTON_ADMIN_DELETE = "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BUTTON_ADMIN_REPORTS = "üìä –û—Ç—á–µ—Ç—ã"
BUTTON_ADMIN_BACK = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
BUTTON_REPORT_TODAY = "üóìÔ∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è"
BUTTON_REPORT_YESTERDAY = "‚è™ –ó–∞ –≤—á–µ—Ä–∞"
BUTTON_REPORT_WEEK = "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"
BUTTON_REPORT_CUSTOM = "üîé –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"
BUTTON_REPORT_EXPORT = "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"
BUTTON_REPORT_MONTHLY_CSV = "üìÖ –°–≤–æ–¥–∫–∞ –∑–∞ –º–µ—Å—è—Ü –≤ CSV"
BUTTON_CONFIRM_DELETE = "–î–∞, —É–¥–∞–ª–∏—Ç—å"
BUTTON_CANCEL_DELETE = "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"

LIVENESS_ACTIONS = ["—É–ª—ã–±–Ω–∏—Ç–µ—Å—å –≤ –∫–∞–º–µ—Ä—É", "–ø–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–º–µ—Ä—É –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü üëç", "–ø–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–º–µ—Ä—É –∑–Ω–∞–∫ '–º–∏—Ä' –¥–≤—É–º—è –ø–∞–ª—å—Ü–∞–º–∏ ‚úåÔ∏è"]

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

DAYS_OF_WEEK = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –õ–û–ì–ò–ö–ê ---

def parse_day_schedule(text: str) -> dict | None:
    text = text.strip().lower()
    if text in ("0", "–≤—ã—Ö–æ–¥–Ω–æ–π"): return {}
    time_pattern = re.compile(r"^([01]\d|2[0-3]):([0-5]\d)-([01]\d|2[0-3]):([0-5]\d)$")
    match = time_pattern.match(text)
    if match: return {"start": f"{match.group(1)}:{match.group(2)}", "end": f"{match.group(3)}:{match.group(4)}"}
    return None

def main_menu_keyboard(): 
    return ReplyKeyboardMarkup([[BUTTON_ARRIVAL, BUTTON_DEPARTURE]], resize_keyboard=True)

def admin_menu_keyboard(): 
    return ReplyKeyboardMarkup([[BUTTON_ADMIN_ADD], [BUTTON_ADMIN_MODIFY, BUTTON_ADMIN_DELETE], [BUTTON_ADMIN_REPORTS]], resize_keyboard=True)

def reports_menu_keyboard():
    return ReplyKeyboardMarkup([
        [BUTTON_REPORT_TODAY, BUTTON_REPORT_YESTERDAY], 
        [BUTTON_REPORT_WEEK, BUTTON_REPORT_CUSTOM], 
        [BUTTON_REPORT_EXPORT, BUTTON_REPORT_MONTHLY_CSV],
        [BUTTON_ADMIN_BACK]
    ], resize_keyboard=True)

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS employees (
                telegram_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                face_encoding BLOB
            );
        """)
        try:
            cursor = await db.execute("PRAGMA table_info(employees);")
            columns = [row[1] for row in await cursor.fetchall()]
            if 'face_encoding' not in columns: await db.execute("ALTER TABLE employees ADD COLUMN face_encoding BLOB;")
            if 'is_active' not in columns: await db.execute("ALTER TABLE employees ADD COLUMN is_active BOOLEAN DEFAULT TRUE;")
        except aiosqlite.OperationalError as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS schedules (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_telegram_id INTEGER NOT NULL,
                day_of_week INTEGER NOT NULL,
                start_time TEXT NOT NULL,
                end_time TEXT NOT NULL,
                FOREIGN KEY (employee_telegram_id) REFERENCES employees (telegram_id),
                UNIQUE(employee_telegram_id, day_of_week)
            );
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS check_ins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_telegram_id INTEGER,
                timestamp DATETIME DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%S', 'NOW')),
                check_in_type TEXT NOT NULL,
                latitude REAL,
                longitude REAL,
                distance_meters REAL,
                face_similarity REAL,
                status TEXT NOT NULL,
                FOREIGN KEY (employee_telegram_id) REFERENCES employees (telegram_id)
            );
        """)
        await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def get_employee_data(telegram_id: int, include_inactive=False) -> dict | None:
    sql = "SELECT telegram_id, full_name, face_encoding, is_active FROM employees WHERE telegram_id = ?"
    if not include_inactive:
        sql += " AND is_active = TRUE"
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(sql, (telegram_id,))
        row = await cursor.fetchone()
        if row:
            return {"id": row[0], "name": row[1], "face_encoding": row[2], "is_active": row[3] == 1}
    return None

async def get_all_active_employees_with_schedules(for_day: int) -> list:
    async with aiosqlite.connect(DB_NAME) as db:
        query = """
            SELECT e.telegram_id, e.full_name, s.start_time
            FROM employees e
            JOIN schedules s ON e.telegram_id = s.employee_telegram_id
            WHERE e.is_active = TRUE AND s.day_of_week = ?
        """
        cursor = await db.execute(query, (for_day,))
        return await cursor.fetchall()

async def get_employee_today_schedule(telegram_id: int) -> dict | None:
    today_weekday = datetime.now(LOCAL_TIMEZONE).weekday()
    async with aiosqlite.connect(DB_NAME) as db:
        query = "SELECT e.full_name, s.start_time, s.end_time FROM employees e JOIN schedules s ON e.telegram_id = s.employee_telegram_id WHERE e.telegram_id = ? AND s.day_of_week = ? AND e.is_active = TRUE"
        cursor = await db.execute(query, (telegram_id, today_weekday))
        row = await cursor.fetchone()
        if row: return {"name": row[0], "start_time": time.fromisoformat(row[1]), "end_time": time.fromisoformat(row[2])}
    return None

async def has_checked_in_today(telegram_id: int, check_in_type: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —á–µ–∫–∏–Ω–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
    """
    today_local = datetime.now(LOCAL_TIMEZONE).date()
    start_of_day_local = datetime.combine(today_local, time.min, tzinfo=LOCAL_TIMEZONE)
    end_of_day_local = datetime.combine(today_local, time.max, tzinfo=LOCAL_TIMEZONE)

    start_of_day_utc = start_of_day_local.astimezone(ZoneInfo("UTC"))
    end_of_day_utc = end_of_day_local.astimezone(ZoneInfo("UTC"))

    statuses_to_check = ('SUCCESS', 'LATE') if check_in_type == 'ARRIVAL' else ('SUCCESS',)
    
    async with aiosqlite.connect(DB_NAME) as db:
        query = """
            SELECT 1 FROM check_ins 
            WHERE employee_telegram_id = ? 
              AND check_in_type = ? 
              AND status IN ({seq})
              AND timestamp BETWEEN ? AND ?
            LIMIT 1
        """.format(seq=','.join('?' for _ in statuses_to_check))
        
        params = (
            telegram_id, 
            check_in_type, 
            *statuses_to_check, 
            start_of_day_utc.strftime('%Y-%m-%d %H:%M:%S'), 
            end_of_day_utc.strftime('%Y-%m-%d %H:%M:%S')
        )
        cursor = await db.execute(query, params)
        return await cursor.fetchone() is not None
        
async def set_employee_active_status(telegram_id: int, is_active: bool):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE employees SET is_active = ? WHERE telegram_id = ?", (is_active, telegram_id))
        await db.commit()

async def set_face_encoding(telegram_id: int, encoding: np.ndarray):
    encoding_bytes = encoding.tobytes()
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE employees SET face_encoding = ? WHERE telegram_id = ?", (encoding_bytes, telegram_id))
        await db.commit()

async def add_or_update_employee(telegram_id: int, full_name: str, schedule_data: dict):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR IGNORE INTO employees (telegram_id, full_name, is_active) VALUES (?, ?, TRUE)", (telegram_id, full_name))
        await db.execute("UPDATE employees SET full_name = ?, is_active = TRUE WHERE telegram_id = ?", (full_name, telegram_id))
        await db.execute("DELETE FROM schedules WHERE employee_telegram_id = ?", (telegram_id,))
        for day_of_week, times in schedule_data.items():
            if times:
                await db.execute("INSERT INTO schedules (employee_telegram_id, day_of_week, start_time, end_time) VALUES (?, ?, ?, ?)", (telegram_id, day_of_week, times['start'], times['end']))
        await db.commit()

async def log_check_in_attempt(telegram_id: int, check_in_type: str, status: str, lat=None, lon=None, distance=None, similarity=None):
    async with aiosqlite.connect(DB_NAME) as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ UTC, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        timestamp_utc = datetime.now(ZoneInfo("UTC")).strftime('%Y-%m-%d %H:%M:%S')
        await db.execute("INSERT INTO check_ins (timestamp, employee_telegram_id, check_in_type, status, latitude, longitude, distance_meters, face_similarity) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", 
                         (timestamp_utc, telegram_id, check_in_type, status, lat, lon, distance, similarity))
        await db.commit()


# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ß–ï–¢–û–í ---
# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ß–ï–¢–û–í ---
async def get_report_stats_for_period(start_date: date, end_date: date) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–µ–∫–∏–Ω–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
    """
    # –î–û–ë–ê–í–õ–ï–ù–û: 'late_employees' –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –∏ –¥–∞—Ç –æ–ø–æ–∑–¥–∞–Ω–∏–π.
    stats = {
        'total_work_days': 0, 
        'total_arrivals': 0, 
        'total_lates': 0, 
        'absences': defaultdict(list),
        'late_employees': defaultdict(list)
    }

    start_dt_local = datetime.combine(start_date, time.min, tzinfo=LOCAL_TIMEZONE)
    end_dt_local = datetime.combine(end_date, time.max, tzinfo=LOCAL_TIMEZONE)
    start_dt_utc = start_dt_local.astimezone(ZoneInfo("UTC"))
    end_dt_utc = end_dt_local.astimezone(ZoneInfo("UTC"))

    async with aiosqlite.connect(DB_NAME) as db:
        cursor_employees = await db.execute("SELECT telegram_id, full_name FROM employees WHERE is_active = TRUE")
        all_employees = {row[0]: row[1] for row in await cursor_employees.fetchall()}

        cursor_schedules = await db.execute("SELECT employee_telegram_id, day_of_week FROM schedules")
        schedules = defaultdict(set)
        for emp_id, day in await cursor_schedules.fetchall():
            schedules[emp_id].add(day)

        query = """
            SELECT employee_telegram_id, timestamp, status 
            FROM check_ins 
            WHERE check_in_type = 'ARRIVAL' 
              AND timestamp BETWEEN ? AND ?
        """
        params = (start_dt_utc.strftime('%Y-%m-%d %H:%M:%S'), end_dt_utc.strftime('%Y-%m-%d %H:%M:%S'))
        cursor_arrivals = await db.execute(query, params)
        
        arrivals_by_date = defaultdict(dict)
        for emp_id, ts_str, status in await cursor_arrivals.fetchall():
            utc_dt = datetime.strptime(ts_str, '%Y-%m-%d %H:%M:%S').replace(tzinfo=ZoneInfo("UTC"))
            local_date_str = utc_dt.astimezone(LOCAL_TIMEZONE).date().isoformat()
            arrivals_by_date[local_date_str][emp_id] = status

        for current_date in (start_date + timedelta(days=n) for n in range((end_date - start_date).days + 1)):
            weekday = current_date.weekday()
            date_str = current_date.isoformat()
            
            for emp_id, name in all_employees.items():
                if weekday in schedules.get(emp_id, set()):
                    stats['total_work_days'] += 1
                    
                    if emp_id in arrivals_by_date.get(date_str, {}):
                        stats['total_arrivals'] += 1
                        if arrivals_by_date[date_str][emp_id] == 'LATE':
                            stats['total_lates'] += 1
                            # –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –æ–Ω –æ–ø–æ–∑–¥–∞–ª.
                            stats['late_employees'][name].append(current_date.strftime('%d.%m'))
                    else:
                        if current_date <= datetime.now(LOCAL_TIMEZONE).date():
                            stats['absences'][name].append(current_date.strftime('%d.%m'))
    return stats

async def get_all_checkins_for_export() -> list:
    async with aiosqlite.connect(DB_NAME) as db:
        query = "SELECT c.timestamp, e.full_name, c.check_in_type, c.status, c.latitude, c.longitude, c.distance_meters, c.face_similarity FROM check_ins c JOIN employees e ON c.employee_telegram_id = e.telegram_id ORDER BY c.timestamp DESC"
        return await (await db.execute(query)).fetchall()

async def send_report_for_period(start_date: date, end_date: date, context: ContextTypes.DEFAULT_TYPE, title_prefix: str, chat_ids: list[int] | int):
    if not isinstance(chat_ids, list):
        chat_ids = [chat_ids]
    
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç: {title_prefix}...")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ {chat_id}: {e}")

    stats = await get_report_stats_for_period(start_date, end_date)
    
    def escape_markdown(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

    start_str = escape_markdown(start_date.strftime('%d.%m.%Y'))
    end_str = escape_markdown(end_date.strftime('%d.%m.%Y'))
    period_str = start_str if start_date == end_date else f"—Å {start_str} –ø–æ {end_str}"
    
    report_lines = [
        f"üìä *{escape_markdown(title_prefix)} –∑–∞ {period_str}*",
        "",
        f"üë• *–í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π* \\(–ø–ª–∞–Ω\\): {stats['total_work_days']}",
        f"‚úÖ *–í—Å–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–æ–≤* \\(—Ñ–∞–∫—Ç\\): {stats['total_arrivals']}",
        f"üïí *–ò–∑ –Ω–∏—Ö –æ–ø–æ–∑–¥–∞–Ω–∏–π:* {stats['total_lates']}",
    ]
    
    # –î–û–ë–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    if stats.get('late_employees'):
        for name, dates in stats['late_employees'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}* \\({escaped_dates}\\)")

    report_lines.append("") # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    report_lines.append(f"‚ùå *–ü—Ä–æ–ø—É—Å–∫–∏* \\({len(stats['absences'])} —á–µ–ª–æ–≤–µ–∫\\(–∞\\)\\):")
    
    if stats['absences']:
        for name, dates in stats['absences'].items():
            escaped_name = escape_markdown(name)
            escaped_dates = escape_markdown(', '.join(dates))
            report_lines.append(f"    `‚îî` *{escaped_name}*: {escaped_dates}")
    else:
        report_lines.append(r"    `‚îî` –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç\!")
    
    report_text = "\n".join(report_lines)
        
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id=chat_id, text=report_text, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ {chat_id}: {e}", exc_info=True)
            await context.bot.send_message(chat_id=chat_id, text=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
# --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ò –ó–ê–î–ê–ß–ò ---
async def send_daily_report_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    await send_report_for_period(datetime.now(LOCAL_TIMEZONE).date(), datetime.now(LOCAL_TIMEZONE).date(), context, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", ADMIN_IDS)

async def check_and_send_notifications(context: ContextTypes.DEFAULT_TYPE):
    logger.info("---[–ó–ê–î–ê–ß–ê]--- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---")
    now = datetime.now(LOCAL_TIMEZONE)
    today_str = now.date().isoformat()

    if 'notifications_sent' not in context.bot_data:
        context.bot_data['notifications_sent'] = {}
    if context.bot_data.get('last_cleanup_date') != today_str:
        logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ù–æ–≤—ã–π –¥–µ–Ω—å ({today_str})! –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        context.bot_data['notifications_sent'] = {}
        context.bot_data['last_cleanup_date'] = today_str

    employees = await get_all_active_employees_with_schedules(now.weekday())
    if not employees:
        return
        
    logger.info(f"---[–ó–ê–î–ê–ß–ê]--- –ù–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    for emp_id, name, start_time_str in employees:
        try:
            logger.info(f"---[–ü–†–û–í–ï–†–ö–ê]--- –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {name} (ID: {emp_id}), –≥—Ä–∞—Ñ–∏–∫: '{start_time_str}'")
            start_time = time.fromisoformat(start_time_str)
            shift_start_datetime = datetime.combine(now.date(), start_time, tzinfo=LOCAL_TIMEZONE)

            # --- –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
            warning_datetime = shift_start_datetime - timedelta(minutes=5)
            missed_datetime = shift_start_datetime + timedelta(minutes=5, seconds=30)
            
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (now)  : {now.isoformat()}")
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è : {warning_datetime.isoformat()}")
            logger.info(f"    [–î–ï–¢–ê–õ–ò] –í—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è      : {missed_datetime.isoformat()}")
            
            # --- –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —É—Å–ª–æ–≤–∏–π ---
            warning_key = f"{emp_id}_warning_{today_str}"
            missed_key = f"{emp_id}_missed_{today_str}"
            
            is_time_for_warning = now >= warning_datetime
            is_warning_sent = context.bot_data['notifications_sent'].get(warning_key, False)
            logger.info(f"    [–£–°–õ–û–í–ò–ï WARNING] now >= warning_datetime? -> {is_time_for_warning}. sent? -> {is_warning_sent}")

            is_time_for_missed = now >= missed_datetime
            is_missed_sent = context.bot_data['notifications_sent'].get(missed_key, False)
            logger.info(f"    [–£–°–õ–û–í–ò–ï MISSED]  now >= missed_datetime?  -> {is_time_for_missed}. sent? -> {is_missed_sent}")
            
            # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
            if is_time_for_warning and not is_warning_sent:
                has_checked_in = await has_checked_in_today(emp_id, "ARRIVAL")
                logger.info(f"    -> –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∏–Ω–∞ –¥–ª—è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {'–ï–°–¢–¨' if has_checked_in else '–ù–ï–¢'}")
                if not has_checked_in:
                    await context.bot.send_message(chat_id=emp_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è.")
                    logger.info(f"    -> –û–¢–ü–†–ê–í–õ–ï–ù–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –¥–ª—è {name}.")
                context.bot_data['notifications_sent'][warning_key] = True

            if is_time_for_missed and not is_missed_sent:
                has_checked_in = await has_checked_in_today(emp_id, "ARRIVAL")
                logger.info(f"    -> –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∏–Ω–∞ –¥–ª—è –û–ü–û–ó–î–ê–ù–ò–Ø: {'–ï–°–¢–¨' if has_checked_in else '–ù–ï–¢'}")
                if not has_checked_in:
                    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º", callback_data="late_checkin")]]
                    await context.bot.send_message(chat_id=emp_id, text="–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫-–∏–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–ø–æ–∑–¥–∞–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(keyboard))
                    logger.info(f"    -> –û–¢–ü–†–ê–í–õ–ï–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –û–ü–û–ó–î–ê–ù–ò–ò –¥–ª—è {name}.")
                context.bot_data['notifications_sent'][missed_key] = True
        
        except Exception as e:
            logger.error(f"---[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê]--- –≤ —Ü–∏–∫–ª–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} (ID: {emp_id}): {e}", exc_info=True)

async def late_checkin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "ARRIVAL"
    context.user_data["is_late"] = True
    await query.edit_message_text(text=f"–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–µ–∫-–∏–Ω–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.")
    return AWAITING_PHOTO
    
async def verify_face(user_id: int, new_photo_file_id: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[float, bool]:
    employee_data = await get_employee_data(user_id)
    if not employee_data or not employee_data["face_encoding"]: return 0.0, False
    known_encoding = np.frombuffer(employee_data["face_encoding"])
    try:
        new_photo_file = await context.bot.get_file(new_photo_file_id)
        photo_stream = BytesIO()
        await new_photo_file.download_to_memory(photo_stream)
        photo_stream.seek(0)
        image = face_recognition.load_image_file(photo_stream)
        def blocking_io_task():
            new_face_encodings = face_recognition.face_encodings(image)
            if not new_face_encodings: return 0.0, False
            distance = face_recognition.face_distance([known_encoding], new_face_encodings[0])[0]
            return max(0.0, (1.0 - distance) * 100), distance < FACE_DISTANCE_THRESHOLD
        similarity_score, is_match = await asyncio.to_thread(blocking_io_task)
        logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è {user_id}: —Å—Ö–æ–∂–µ—Å—Ç—å {similarity_score:.2f}%. –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_match}")
        return similarity_score, is_match
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
        return 0.0, False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    employee_data = await get_employee_data(user.id)
    if not employee_data:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if not employee_data["face_encoding"]:
        await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_data['name']}!\n\n–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –ª–∏—Ü–æ.", reply_markup=ReplyKeyboardRemove())
        return REGISTER_FACE
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_data['name']}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    return CHOOSE_ACTION

async def register_face(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    photo_file_id = update.message.photo[-1].file_id
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
    try:
        photo_file = await context.bot.get_file(photo_file_id)
        photo_stream = BytesIO()
        await photo_file.download_to_memory(photo_stream)
        image = face_recognition.load_image_file(photo_stream)
        def blocking_io_task():
            return face_recognition.face_encodings(image)[0] if face_recognition.face_encodings(image) else None
        encoding = await asyncio.to_thread(blocking_io_task)
        if encoding is None:
            await update.message.reply_text("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return REGISTER_FACE
        await set_face_encoding(user.id, encoding)
        logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ –ª–∏—Ü–æ.")
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ª–∏—Ü–∞ –¥–ª—è {user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_FACE

async def handle_arrival(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    schedule = await get_employee_today_schedule(user.id)
    if not schedule: return CHOOSE_ACTION
    if await has_checked_in_today(user.id, "ARRIVAL"):
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    grace_period_end = (datetime.combine(date.today(), schedule['start_time']) + timedelta(minutes=5)).time()
    if datetime.now(LOCAL_TIMEZONE).time() > grace_period_end:
        await update.message.reply_text(f"–í—ã –æ–ø–æ–∑–¥–∞–ª–∏. –î–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫–∏–Ω–∞ –±—ã–ª–æ –¥–æ {grace_period_end.strftime('%H:%M')}.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "ARRIVAL"
    await update.message.reply_text(f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=ReplyKeyboardRemove())
    return AWAITING_PHOTO

async def handle_departure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    schedule = await get_employee_today_schedule(user.id)
    if not schedule: return CHOOSE_ACTION
    if not await has_checked_in_today(user.id, "ARRIVAL"):
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    if await has_checked_in_today(user.id, "DEPARTURE"):
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    allowed_departure_start = (datetime.combine(date.today(), schedule['end_time']) - timedelta(minutes=10)).time()
    if datetime.now(LOCAL_TIMEZONE).time() < allowed_departure_start:
        await update.message.reply_text(f"–ï—â–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —É—Ö–æ–¥–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {allowed_departure_start.strftime('%H:%M')}.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "DEPARTURE"
    await update.message.reply_text(f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=ReplyKeyboardRemove())
    return AWAITING_PHOTO

async def awaiting_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['photo_file_id'] = update.message.photo[-1].file_id
    location_keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)]]
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∏–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=ReplyKeyboardMarkup(location_keyboard, resize_keyboard=True, one_time_keyboard=True))
    return AWAITING_LOCATION

async def awaiting_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user, user_location = update.effective_user, update.message.location
    photo_file_id, check_in_type, is_late = context.user_data.get('photo_file_id'), context.user_data.get('checkin_type'), context.user_data.get('is_late', False)
    if not all([photo_file_id, check_in_type]):
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    await update.message.reply_text("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...", reply_markup=ReplyKeyboardRemove())
    distance = round(geodesic(WORK_LOCATION_COORDS, (user_location.latitude, user_location.longitude)).meters, 2)
    if distance > ALLOWED_RADIUS_METERS:
        await log_check_in_attempt(user.id, check_in_type, 'FAIL_LOCATION', user_location.latitude, user_location.longitude, distance)
        await update.message.reply_text(f"‚ùå –ß–µ–∫-–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ ({distance} –º).", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    face_similarity, is_match = await verify_face(user.id, photo_file_id, context)
    if not is_match:
        await log_check_in_attempt(user.id, check_in_type, 'FAIL_FACE', user_location.latitude, user_location.longitude, distance, face_similarity)
        await update.message.reply_text(f"‚ùå –ß–µ–∫-–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–õ–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (—Å—Ö–æ–∂–µ—Å—Ç—å: {face_similarity:.1f}%).", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    status = "LATE" if is_late else "SUCCESS"
    await log_check_in_attempt(user.id, check_in_type, status, user_location.latitude, user_location.longitude, distance, face_similarity)
    success_message = f"‚úÖ {'–ü—Ä–∏—Ö–æ–¥' if check_in_type == 'ARRIVAL' else '–£—Ö–æ–¥'} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω!"
    if is_late: success_message += " (—Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º)"
    await update.message.reply_text(f"{success_message}\n\nüìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ñ–∏—Å–∞: {distance} –º.\nüë§ –°—Ö–æ–∂–µ—Å—Ç—å –ª–∏—Ü–∞: {face_similarity:.1f}%\n\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=main_menu_keyboard())
    return CHOOSE_ACTION

async def employee_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    context.user_data.clear()
    return CHOOSE_ACTION

# --- –î–ò–ê–õ–û–ì –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS: return ConversationHandler.END
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_keyboard())
    return ADMIN_MENU

async def admin_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=reports_menu_keyboard())
    return ADMIN_REPORTS_MENU

async def admin_get_today_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    today = datetime.now(LOCAL_TIMEZONE).date()
    await send_report_for_period(today, today, context, "–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", update.effective_chat.id)
    return ADMIN_REPORTS_MENU

async def admin_get_yesterday_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    yesterday = datetime.now(LOCAL_TIMEZONE).date() - timedelta(days=1)
    await send_report_for_period(yesterday, yesterday, context, "–û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞", update.effective_chat.id)
    return ADMIN_REPORTS_MENU

async def admin_get_weekly_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    today = datetime.now(LOCAL_TIMEZONE).date()
    start_of_week = today - timedelta(days=today.weekday())
    await send_report_for_period(start_of_week, today, context, "–û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", update.effective_chat.id)
    return ADMIN_REPORTS_MENU
    
async def admin_custom_report_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì`\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `01.06.2024-15.06.2024`",
        reply_markup=ReplyKeyboardMarkup([[BUTTON_ADMIN_BACK]], resize_keyboard=True)
    )
    return REPORT_GET_DATES

async def admin_custom_report_get_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        start_date_str, end_date_str = update.message.text.split('-')
        start_date = datetime.strptime(start_date_str.strip(), '%d.%m.%Y').date()
        end_date = datetime.strptime(end_date_str.strip(), '%d.%m.%Y').date()
        
        if start_date > end_date:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return REPORT_GET_DATES

        await send_report_for_period(start_date, end_date, context, "–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥", update.effective_chat.id)
        await admin_reports_menu(update, context)
        return ADMIN_REPORTS_MENU

    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì` –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return REPORT_GET_DATES

async def admin_export_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    all_checkins = await get_all_checkins_for_export()
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Timestamp', 'FullName', 'CheckInType', 'Status', 'Latitude', 'Longitude', 'DistanceMeters', 'FaceSimilarity'])
    writer.writerows(all_checkins)
    csv_bytes = BytesIO(output.getvalue().encode('utf-8'))
    await update.message.reply_document(document=InputFile(csv_bytes, filename=f"checkin_export_{date.today().isoformat()}.csv"), caption="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ —á–µ–∫-–∏–Ω–∞—Ö.")
    return ADMIN_REPORTS_MENU

async def admin_monthly_csv_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ú–ú.–ì–ì–ì–ì`\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `06.2025`",
        reply_markup=ReplyKeyboardMarkup([[BUTTON_ADMIN_BACK]], resize_keyboard=True),
        parse_mode='MarkdownV2'
    )
    return MONTHLY_CSV_GET_MONTH

async def admin_monthly_csv_get_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        month_str, year_str = update.message.text.strip().split('.')
        month, year = int(month_str), int(year_str)

        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {month:02d}.{year}...")
        
        summary_data = await get_monthly_summary_data(year, month)

        if not summary_data or len(summary_data) <= 1:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            await admin_reports_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
            return ADMIN_REPORTS_MENU

        output = StringIO()
        writer = csv.writer(output)
        writer.writerows(summary_data)
        
        csv_bytes = BytesIO(output.getvalue().encode('utf-8'))
        filename = f"monthly_summary_{year}_{month:02d}.csv"
        
        await update.message.reply_document(
            document=InputFile(csv_bytes, filename=filename),
            caption=f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {month:02d}.{year}"
        )
        await admin_reports_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
        return ADMIN_REPORTS_MENU

    except (ValueError, IndexError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∫–∞–∫ `–ú–ú.–ì–ì–ì–ì` –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='MarkdownV2'
        )
        return MONTHLY_CSV_GET_MONTH

async def get_monthly_summary_data(year: int, month: int) -> list[list]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –≤–∏–¥–µ –ø–∏–≤–æ—Ç-—Ç–∞–±–ª–∏—Ü—ã.
    """
    try:
        start_date = date(year, month, 1)
        num_days = calendar.monthrange(year, month)[1]
        end_date = date(year, month, num_days)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –º–µ—Å—è—Ü: {year}-{month}")
        return []

    # --- 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    start_dt_local = datetime.combine(start_date, time.min, tzinfo=LOCAL_TIMEZONE)
    end_dt_local = datetime.combine(end_date, time.max, tzinfo=LOCAL_TIMEZONE)
    start_dt_utc = start_dt_local.astimezone(ZoneInfo("UTC"))
    end_dt_utc = end_dt_local.astimezone(ZoneInfo("UTC"))

    all_employees = {}
    schedules = defaultdict(set)
    checkins = defaultdict(dict)

    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cursor_employees = await db.execute("SELECT telegram_id, full_name FROM employees WHERE is_active = TRUE ORDER BY full_name")
        for row in await cursor_employees.fetchall():
            all_employees[row[0]] = row[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        cursor_schedules = await db.execute("SELECT employee_telegram_id, day_of_week FROM schedules")
        for emp_id, day in await cursor_schedules.fetchall():
            schedules[emp_id].add(day)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫–∏–Ω—ã –∑–∞ –º–µ—Å—è—Ü
        query = "SELECT employee_telegram_id, timestamp, status FROM check_ins WHERE check_in_type = 'ARRIVAL' AND timestamp BETWEEN ? AND ?"
        params = (start_dt_utc.strftime('%Y-%m-%d %H:%M:%S'), end_dt_utc.strftime('%Y-%m-%d %H:%M:%S'))
        cursor_arrivals = await db.execute(query, params)
        for emp_id, ts_str, status in await cursor_arrivals.fetchall():
            utc_dt = datetime.strptime(ts_str, '%Y-%m-%d %H:%M:%S').replace(tzinfo=ZoneInfo("UTC"))
            local_date_str = utc_dt.astimezone(LOCAL_TIMEZONE).date().isoformat()
            checkins[emp_id][local_date_str] = status

    # --- 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–°–æ—Ç—Ä—É–¥–Ω–∏–∫, 01.06, 02.06, ...)
    header = ["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"] + [f"{day:02d}.{month:02d}" for day in range(1, num_days + 1)]
    result_table = [header]

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    for emp_id, name in all_employees.items():
        employee_row = [name]
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –º–µ—Å—è—Ü–∞
        for day in range(1, num_days + 1):
            current_date = date(year, month, day)
            current_date_str = current_date.isoformat()
            weekday = current_date.weekday()
            
            status_str = "–í—ã—Ö–æ–¥–Ω–æ–π" # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–π –ø–æ –≥—Ä–∞—Ñ–∏–∫—É
            if weekday in schedules.get(emp_id, set()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —á–µ–∫–∏–Ω –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                checkin_status = checkins.get(emp_id, {}).get(current_date_str)
                if checkin_status:
                    if checkin_status == 'LATE':
                        status_str = '–û–ø–æ–∑–¥–∞–ª'
                    elif checkin_status == 'SUCCESS':
                        status_str = '–í–æ–≤—Ä–µ–º—è'
                else:
                    # –ï—Å–ª–∏ —á–µ–∫–∏–Ω–∞ –Ω–µ –±—ã–ª–æ, –Ω–æ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                    if current_date <= datetime.now(LOCAL_TIMEZONE).date():
                        status_str = '–ü—Ä–æ–ø—É—Å—Ç–∏–ª'
                    else: # –î–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                        status_str = '‚Äî'

            employee_row.append(status_str)
        result_table.append(employee_row)

    return result_table

async def admin_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –®–∞–≥ 1: –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=ReplyKeyboardMarkup([[BUTTON_ADMIN_BACK]], resize_keyboard=True))
    return ADD_GET_ID

async def add_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not isinstance(update.message.forward_origin, MessageOriginUser):
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return ADD_GET_ID
    user_id = update.message.forward_origin.sender_user.id
    context.user_data['new_employee_id'] = user_id
    await update.message.reply_text(f"ID: `{user_id}`\\.\n–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –§–ò–û\\.", parse_mode='MarkdownV2')
    return ADD_GET_NAME

async def add_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_employee_name'] = update.message.text
    await update.message.reply_text(f"–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {DAYS_OF_WEEK[0]} (—Ñ–æ—Ä–º–∞—Ç `09:00-18:00` –∏–ª–∏ `0`).")
    return SCHEDULE_MON

async def admin_modify_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=ReplyKeyboardMarkup([[BUTTON_ADMIN_BACK]], resize_keyboard=True))
    return MODIFY_GET_ID

async def modify_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not isinstance(update.message.forward_origin, MessageOriginUser):
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return MODIFY_GET_ID
    user_id = update.message.forward_origin.sender_user.id
    employee = await get_employee_data(user_id, include_inactive=True)
    if not employee:
        await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return MODIFY_GET_ID
    context.user_data['target_employee_id'] = user_id
    context.user_data['target_employee_name'] = employee['name']
    await update.message.reply_text(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è: {employee['name']}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è {DAYS_OF_WEEK[0]} (`09:00-18:00` –∏–ª–∏ `0`).")
    return SCHEDULE_MON

async def admin_delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=ReplyKeyboardMarkup([[BUTTON_ADMIN_BACK]], resize_keyboard=True))
    return DELETE_GET_ID

async def delete_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not isinstance(update.message.forward_origin, MessageOriginUser):
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return DELETE_GET_ID
    user_id = update.message.forward_origin.sender_user.id
    employee = await get_employee_data(user_id, include_inactive=True)
    if not employee:
        await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return DELETE_GET_ID
    context.user_data['target_employee_id'] = user_id
    await update.message.reply_text(f"–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']} ({user_id})? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø.", reply_markup=ReplyKeyboardMarkup([[BUTTON_CONFIRM_DELETE, BUTTON_CANCEL_DELETE]], resize_keyboard=True))
    return DELETE_CONFIRM

async def delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == BUTTON_CONFIRM_DELETE:
        await set_employee_active_status(context.user_data['target_employee_id'], False)
        await update.message.reply_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=admin_menu_keyboard())
    else:
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    context.user_data.clear()
    return ADMIN_MENU

def schedule_handler_factory(day_index: int):
    async def get_schedule_for_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            parsed_time = parse_day_schedule(update.message.text)
            if parsed_time is None:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ `—á—á:–º–º-—á—á:–º–º` –∏–ª–∏ `0`.")
                return SCHEDULE_MON + day_index
            if 'schedule' not in context.user_data: context.user_data['schedule'] = {}
            context.user_data['schedule'][day_index] = parsed_time
            next_day_index = day_index + 1
            if next_day_index < len(DAYS_OF_WEEK):
                await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ {DAYS_OF_WEEK[next_day_index]}.")
                return SCHEDULE_MON + next_day_index
            else:
                full_name, telegram_id = None, None
                if 'new_employee_id' in context.user_data:
                    telegram_id, full_name = context.user_data['new_employee_id'], context.user_data['new_employee_name']
                elif 'target_employee_id' in context.user_data:
                    telegram_id, full_name = context.user_data['target_employee_id'], context.user_data['target_employee_name']
                
                if not (telegram_id and full_name):
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu_keyboard())
                    context.user_data.clear()
                    return ADMIN_MENU
                
                schedule_data = context.user_data['schedule']
                await add_or_update_employee(telegram_id, full_name, schedule_data)
                
                escaped_name = re.sub(r'([_*\[\]()~`>#\+\-=|{}.!])', r'\\\1', full_name)
                await update.message.reply_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *{escaped_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!", parse_mode='MarkdownV2', reply_markup=admin_menu_keyboard())
                context.user_data.clear()
                return ADMIN_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_handler_factory: {e}", exc_info=True)
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=admin_menu_keyboard())
            context.user_data.clear()
            return ADMIN_MENU
    return get_schedule_for_day

async def admin_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await admin_command(update, context)
    return ADMIN_MENU

async def main() -> None:
    persistence = PicklePersistence(filepath=PERSISTENCE_FILE)
    application = Application.builder().token(BOT_TOKEN).persistence(persistence).build()
    
    checkin_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_command),
            CallbackQueryHandler(late_checkin_callback, pattern="^late_checkin$")
        ],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.Regex(f"^{BUTTON_ARRIVAL}$"), handle_arrival), MessageHandler(filters.Regex(f"^{BUTTON_DEPARTURE}$"), handle_departure)],
            REGISTER_FACE: [MessageHandler(filters.PHOTO, register_face)],
            AWAITING_PHOTO: [MessageHandler(filters.PHOTO, awaiting_photo)],
            AWAITING_LOCATION: [MessageHandler(filters.LOCATION, awaiting_location)],
        },
        fallbacks=[CommandHandler("cancel", employee_cancel_command)],
        allow_reentry=True, name="checkin_conversation", persistent=True,
    )
    
    schedule_handlers = [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_handler_factory(i)) for i in range(7)]
    admin_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_command)],
        states={
            ADMIN_MENU: [
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_ADD}$"), admin_add_start),
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_MODIFY}$"), admin_modify_start),
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_DELETE}$"), admin_delete_start),
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_REPORTS}$"), admin_reports_menu),
            ],
            ADMIN_REPORTS_MENU: [
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_TODAY}$"), admin_get_today_report),
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_YESTERDAY}$"), admin_get_yesterday_report),
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_WEEK}$"), admin_get_weekly_report),
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_CUSTOM}$"), admin_custom_report_start),
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_EXPORT}$"), admin_export_csv),
                MessageHandler(filters.Regex(f"^{BUTTON_REPORT_MONTHLY_CSV}$"), admin_monthly_csv_start),
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_BACK}$"), admin_command),
            ],
            REPORT_GET_DATES: [
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_BACK}$"), admin_back_to_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_custom_report_get_dates)
            ],
            MONTHLY_CSV_GET_MONTH: [
                MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_BACK}$"), admin_reports_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_monthly_csv_get_month)
            ],
            ADD_GET_ID: [MessageHandler(filters.FORWARDED, add_get_id)],
            ADD_GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_get_name)],
            MODIFY_GET_ID: [MessageHandler(filters.FORWARDED, modify_get_id)],
            DELETE_GET_ID: [MessageHandler(filters.FORWARDED, delete_get_id)],
            DELETE_CONFIRM: [MessageHandler(filters.Regex(f"^{BUTTON_CONFIRM_DELETE}$") | filters.Regex(f"^{BUTTON_CANCEL_DELETE}$"), delete_confirm)],
            SCHEDULE_MON: [schedule_handlers[0]], SCHEDULE_TUE: [schedule_handlers[1]], SCHEDULE_WED: [schedule_handlers[2]],
            SCHEDULE_THU: [schedule_handlers[3]], SCHEDULE_FRI: [schedule_handlers[4]], SCHEDULE_SAT: [schedule_handlers[5]],
            SCHEDULE_SUN: [schedule_handlers[6]],
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{BUTTON_ADMIN_BACK}$"), admin_back_to_menu), CommandHandler("cancel", admin_back_to_menu)],
        name="admin_conversation", persistent=True,
    )

    application.add_handler(admin_conv_handler)
    application.add_handler(checkin_conv_handler)
    application.add_handler(CallbackQueryHandler(late_checkin_callback, pattern="^late_checkin$"))
    
    scheduler = AsyncIOScheduler(timezone=LOCAL_TIMEZONE)
    scheduler.add_job(check_and_send_notifications, 'interval', minutes=1, args=[application])
    scheduler.add_job(send_daily_report_job, 'cron', hour=21, minute=0, args=[application])
    
    async with application:
        await init_db()
        await application.initialize()
        await application.updater.start_polling()
        await application.start()
        scheduler.start()
        logger.info("–ë–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await asyncio.Event().wait()

if __name__ == "__main__":
    try: asyncio.run(main())
    except Exception as e: logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
