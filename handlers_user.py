# handlers_user.py
import logging
import asyncio
import random
import face_recognition
import numpy as np
from datetime import datetime, date, time, timedelta
from io import BytesIO
from concurrent.futures import ProcessPoolExecutor
from app_context import get_process_pool_executor
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from geopy.distance import geodesic

import database
from keyboards import main_menu_keyboard
from config import (
    CHOOSE_ACTION, AWAITING_PHOTO, AWAITING_LOCATION, REGISTER_FACE, LIVENESS_ACTIONS,
    BUTTON_ARRIVAL, BUTTON_DEPARTURE, WORK_LOCATION_COORDS, ALLOWED_RADIUS_METERS,
    FACE_DISTANCE_THRESHOLD
)

# handlers_user.py
# ... (–ø–æ—Å–ª–µ –≤—Å–µ—Ö import)

def _face_recognition_worker(image_bytes: bytes) -> np.ndarray | None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ."""
    image = face_recognition.load_image_file(BytesIO(image_bytes))
    face_encodings = face_recognition.face_encodings(image)
    return face_encodings[0] if face_encodings else None

def _face_verification_worker(image_bytes: bytes, known_encoding_bytes: bytes) -> tuple[float, bool]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –ª–∏—Ü."""
    known_encoding = np.frombuffer(known_encoding_bytes)
    image = face_recognition.load_image_file(BytesIO(image_bytes))

    new_face_encodings = face_recognition.face_encodings(image)
    if not new_face_encodings:
        return 0.0, False

    distance = face_recognition.face_distance([known_encoding], new_face_encodings[0])[0]
    similarity_score = max(0.0, (1.0 - distance) * 100)
    is_match = distance < FACE_DISTANCE_THRESHOLD
    return similarity_score, is_match


logger = logging.getLogger(__name__)

async def verify_face(user_id: int, new_photo_file_id: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[float, bool]:
    employee_data = await database.get_employee_data(user_id)
    if not employee_data or not employee_data["face_encoding"]:
        return 0.0, False

    known_encoding_bytes = employee_data["face_encoding"]
    new_photo_file = await context.bot.get_file(new_photo_file_id)

    photo_stream = BytesIO()
    await new_photo_file.download_to_memory(photo_stream)
    image_bytes = photo_stream.getvalue()

    loop = asyncio.get_running_loop()
    executor = get_process_pool_executor()

    similarity_score, is_match = await loop.run_in_executor(
        executor, _face_verification_worker, image_bytes, known_encoding_bytes
    )

    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è {user_id}: —Å—Ö–æ–∂–µ—Å—Ç—å {similarity_score:.2f}%. –†–µ–∑—É–ª—å—Ç–∞—Ç: {is_match}")
    return similarity_score, is_match

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_command –∏–∑ bot.py)
    user = update.effective_user
    employee_data = await database.get_employee_data(user.id)
    if not employee_data:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if not employee_data["face_encoding"]:
        await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_data['name']}!\n\n–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –ª–∏—Ü–æ.", reply_markup=ReplyKeyboardRemove())
        return REGISTER_FACE
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {employee_data['name']}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    return CHOOSE_ACTION

async def register_face(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    photo_file = await update.message.photo[-1].get_file()

    photo_stream = BytesIO()
    await photo_file.download_to_memory(photo_stream)
    image_bytes = photo_stream.getvalue()

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)...")

    loop = asyncio.get_running_loop()
    executor = get_process_pool_executor()

    encoding = await loop.run_in_executor(
        executor, _face_recognition_worker, image_bytes
    )

    if encoding is None:
        await update.message.reply_text("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ, –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ.")
        return REGISTER_FACE

    await database.set_face_encoding(user.id, encoding)
    logger.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ –ª–∏—Ü–æ.")
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –ª–∏—Ü–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard())
    return CHOOSE_ACTION


async def handle_arrival(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_arrival –∏–∑ bot.py)
    user = update.effective_user
    schedule = await database.get_employee_today_schedule(user.id)
    if not schedule: return CHOOSE_ACTION
    if await database.has_checked_in_today(user.id, "ARRIVAL"):
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    grace_period_end = (datetime.combine(date.today(), schedule['start_time']) + timedelta(minutes=5)).time()
    if datetime.now(database.LOCAL_TIMEZONE).time() > grace_period_end:
        await update.message.reply_text(f"–í—ã –æ–ø–æ–∑–¥–∞–ª–∏. –î–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫–∏–Ω–∞ –±—ã–ª–æ –¥–æ {grace_period_end.strftime('%H:%M')}.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "ARRIVAL"
    await update.message.reply_text(f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=ReplyKeyboardRemove())
    return AWAITING_PHOTO

async def handle_departure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ handle_departure –∏–∑ bot.py)
    user = update.effective_user
    schedule = await database.get_employee_today_schedule(user.id)
    if not schedule: return CHOOSE_ACTION
    if not await database.has_checked_in_today(user.id, "ARRIVAL"):
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    if await database.has_checked_in_today(user.id, "DEPARTURE"):
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —É—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    allowed_departure_start = (datetime.combine(date.today(), schedule['end_time']) - timedelta(minutes=10)).time()
    if datetime.now(database.LOCAL_TIMEZONE).time() < allowed_departure_start:
        await update.message.reply_text(f"–ï—â–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —É—Ö–æ–¥–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {allowed_departure_start.strftime('%H:%M')}.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "DEPARTURE"
    await update.message.reply_text(f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ö–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=ReplyKeyboardRemove())
    return AWAITING_PHOTO

async def awaiting_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ awaiting_photo –∏–∑ bot.py)
    context.user_data['photo_file_id'] = update.message.photo[-1].file_id
    location_keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)]]
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∏–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=ReplyKeyboardMarkup(location_keyboard, resize_keyboard=True, one_time_keyboard=True))
    return AWAITING_LOCATION


async def awaiting_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ awaiting_location –∏–∑ bot.py)
    user, user_location = update.effective_user, update.message.location
    photo_file_id, check_in_type, is_late = context.user_data.get('photo_file_id'), context.user_data.get('checkin_type'), context.user_data.get('is_late', False)
    if not all([photo_file_id, check_in_type]):
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    await update.message.reply_text("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...", reply_markup=ReplyKeyboardRemove())
    distance = round(geodesic(WORK_LOCATION_COORDS, (user_location.latitude, user_location.longitude)).meters, 2)
    if distance > ALLOWED_RADIUS_METERS:
        await database.log_check_in_attempt(user.id, check_in_type, 'FAIL_LOCATION', user_location.latitude, user_location.longitude, distance)
        await update.message.reply_text(f"‚ùå –ß–µ–∫-–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ ({distance} –º).", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    face_similarity, is_match = await verify_face(user.id, photo_file_id, context)
    if not is_match:
        await database.log_check_in_attempt(user.id, check_in_type, 'FAIL_FACE', user_location.latitude, user_location.longitude, distance, face_similarity)
        await update.message.reply_text(f"‚ùå –ß–µ–∫-–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n–õ–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (—Å—Ö–æ–∂–µ—Å—Ç—å: {face_similarity:.1f}%).", reply_markup=main_menu_keyboard())
        return CHOOSE_ACTION
    status = "LATE" if is_late else "SUCCESS"
    await database.log_check_in_attempt(user.id, check_in_type, status, user_location.latitude, user_location.longitude, distance, face_similarity)
    success_message = f"‚úÖ {'–ü—Ä–∏—Ö–æ–¥' if check_in_type == 'ARRIVAL' else '–£—Ö–æ–¥'} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω!"
    if is_late: success_message += " (—Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º)"
    await update.message.reply_text(f"{success_message}\n\nüìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ñ–∏—Å–∞: {distance} –º.\nüë§ –°—Ö–æ–∂–µ—Å—Ç—å –ª–∏—Ü–∞: {face_similarity:.1f}%\n\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=main_menu_keyboard())
    return CHOOSE_ACTION


async def employee_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ employee_cancel_command –∏–∑ bot.py)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    context.user_data.clear()
    return CHOOSE_ACTION


async def late_checkin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ late_checkin_callback –∏–∑ bot.py)
    query = update.callback_query
    await query.answer()
    action = random.choice(LIVENESS_ACTIONS)
    context.user_data["checkin_type"] = "ARRIVAL"
    context.user_data["is_late"] = True
    await query.edit_message_text(text=f"–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–µ–∫-–∏–Ω–∞ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {action} –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.")
    return AWAITING_PHOTO